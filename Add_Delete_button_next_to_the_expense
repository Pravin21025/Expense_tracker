import React, { useState, useEffect } from 'react';
import firebase from 'firebase/app';
import 'firebase/database';

const ExpenseTracker = () => {
  const [moneySpent, setMoneySpent] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('');
  const [date, setDate] = useState('');
  const [expenses, setExpenses] = useState([]);
  const [editingExpenseId, setEditingExpenseId] = useState(null);
  const [editedMoneySpent, setEditedMoneySpent] = useState('');
  const [editedDescription, setEditedDescription] = useState('');
  const [editedCategory, setEditedCategory] = useState('');
  const [editedDate, setEditedDate] = useState('');

  useEffect(() => {
    const fetchExpenses = async () => {
      const expensesRef = firebase.database().ref('expenses');
      expensesRef.on('value', (snapshot) => {
        const expensesData = snapshot.val();
        if (expensesData) {
          const expensesList = Object.keys(expensesData).map((key) => ({
            id: key,
            ...expensesData[key]
          }));
          setExpenses(expensesList);
        }
      });
    };

    fetchExpenses();

    return () => {
      firebase.database().ref('expenses').off();
    };
  }, []);

  const handleAddExpense = () => {
    const newExpense = {
      moneySpent,
      description,
      category,
      date
    };
    firebase.database().ref('expenses').push(newExpense);
    setMoneySpent('');
    setDescription('');
    setCategory('');
    setDate('');
  };

  const handleDeleteExpense = (expenseId) => {
    firebase.database().ref(`expenses/${expenseId}`).remove()
      .then(() => {
        console.log("Expense successfully deleted");
      })
      .catch((error) => {
        console.error("Error deleting expense:", error);
      });
  };

  const handleEditExpense = (expenseId) => {
    const editedExpense = {
      moneySpent: editedMoneySpent,
      description: editedDescription,
      category: editedCategory,
      date: editedDate
    };
    firebase.database().ref(`expenses/${expenseId}`).set(editedExpense)
      .then(() => {
        setEditingExpenseId(null);
        console.log("Expense successfully edited");
      })
      .catch((error) => {
        console.error("Error editing expense:", error);
      });
  };

  return (
    <div>
      <h2>Add Daily Expenses</h2>
      {/* Expense Form */}
      <form onSubmit={handleAddExpense}>
        {/* Input fields */}
        <button type="submit">Add Expense</button>
      </form>
      
      {/* Display Expenses */}
      <h3>Expenses:</h3>
      <ul>
        {expenses.map((expense) => (
          <li key={expense.id}>
            <div>
              <strong>Date:</strong> {expense.date}, <strong>Amount:</strong> {expense.moneySpent}, <strong>Description:</strong> {expense.description}, <strong>Category:</strong> {expense.category}
              {editingExpenseId === expense.id ? (
                <>
                  <input type="number" value={editedMoneySpent} onChange={(e) => setEditedMoneySpent(e.target.value)} />
                  <input type="text" value={editedDescription} onChange={(e) => setEditedDescription(e.target.value)} />
                  <input type="text" value={editedCategory} onChange={(e) => setEditedCategory(e.target.value)} />
                  <input type="date" value={editedDate} onChange={(e) => setEditedDate(e.target.value)} />
                  <button onClick={() => handleEditExpense(expense.id)}>Submit</button>
                </>
              ) : (
                <>
                  <button onClick={() => setEditingExpenseId(expense.id)}>Edit</button>
                  <button onClick={() => handleDeleteExpense(expense.id)}>Delete</button>
                </>
              )}
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ExpenseTracker;
